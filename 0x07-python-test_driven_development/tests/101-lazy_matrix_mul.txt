# tests/101-lazy_matrix_mul.txt
# Author: HAJAR EL ABDELLAOUI

=======================================
How To Use tests/101-lazy_matrix_mul.py
=======================================

This library contains on function ``lazy_matrix_mul()``, 
that multiplies 2 matrices

Valid Cases:
============

	>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
	>>> m_a = [[1, 2]]
	>>> m_b = [[3, 4], [5, 6]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[13 16]]

case 1

	>>> m_a = [[3.1, 1.2]]
	>>> m_b = [[0.3, 1.5], [3.0, 0.2]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[4.53 4.89]]

case 2

	>>> m_a = [[1, 2]]
	>>> m_b = [[0.25, 0.15], [2, 0.5]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[4.25 1.15]]

Invalid Cases:
==============
call lazy_matrix_mul with one arg

case 3

	>>> m_a = [[1, 2]]
	>>> lazy_matrix_mul(m_a)
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

call lazy_matrix_mul with no args

case 4

	>>> lazy_matrix_mul() # doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 2 required positional arguments:
	'm_a' and 'm_b'

m_a is not list

	>>> m_a = 27
	>>> m_b = [[1, 2]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead

m_b is not list

case 5

	>>> m_a = [[3, 4, 5]]
	>>> m_b = 27
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead

m_a is not list of list

case 6

	>>> m_a = [1, 2, 3]
	>>> m_b = [[2, 3], [4, 5], [6, 7]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[28 34]

m_b is not list of list

case 7

	>>> m_a = [[1, 2]]
	>>> m_b = [3, 4, 5]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: shapes (1,2) and (3,) not aligned: 2 (dim 1) != 3 (dim 0)

m_a is empty list []

case 8

	>>> m_a = []
	>>> m_b = [[3, 5]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: shapes (0,) and (1,2) not aligned: 0 (dim 0) != 1 (dim 0)

m_b == []

case 9

	>>> m_a = [[1, 2]]
	>>> m_b = []
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: shapes (1,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

m_a == [[]]

case 10

	>>> m_a = [[]]
	>>> m_b = [[1, 2]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: shapes (1,0) and (1,2) not aligned: 0 (dim 1) != 1 (dim 0)

m_b == [[]]

case 11

	>>> m_a = [[1, 2]]
	>>> m_b = [[]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: shapes (1,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

m_a contains no int or float elements

case 12

	>>> m_a = [[1, "H"]]
	>>> m_b = [[3, 2], [5, 2]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	TypeError: invalid data type for einsum
